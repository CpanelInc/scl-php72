From 0d1dfc0f659fa0681ac2142e0727fe0b30958a26 Mon Sep 17 00:00:00 2001
From: Giam Teck Choon <giamteckchoon@gmail.com>
Date: Tue, 15 Mar 2016 11:27:42 +0800
Subject: [PATCH] PHP mail() header patch

This is a patch to add an informational header to messages sent from PHP via
the mail() function. This can help to track which script on a server was used
to send a message, and which client caused it to be sent.

The header added has the form:

    X-PHP-Script: <servername><php-self> for <remote-addr>

For example:

    X-PHP-Script: www.example.com/~user/testapp/send-mail.php for 10.0.0.1

If the connection appears to have come via a proxy cache (i.e. has an
"X-Forwarded-For" header), is a list of addresses (the addresses in
X-Forwarded-For, then the 'real' remote address).

This patch is a modified version of Steve Bennett's patch which can be
read at http://www.lancs.ac.uk/~steveb/patches/php-mail-header-patch/
since his patch only available for version 4.3.4 during the time I checked
and also won't be working for mail function example 1 as listed at
http://www.php.net/manual/en/function.mail.php

Special thanks to:

(1) Steve Bennett for his patch
(2) Stefan Esser from hardened-php.net to report a security issue regarding
    PHP_SELF in headers (http://www.hardened-php.net/advisory_142006.139.html)
(3) Alexey Koscheev from koscheev.ru regarding using zend_is_auto_global
    to properly access $_SERVER (24 Jan 2015)
    Reference: http://grokbase.com/t/php/php-internals/033hwqce0z/server-registration-issue
(4) Alexey Koscheev from koscheev.ru regarding protecting variables from changing by user
    (14 Mar 2016)
(5) S. Kurt Newman from cpanel.net updated with PHP 7 (phpng) API changes
    (02 Jun 2016)
---
 ext/standard/mail.c | 58 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 58 insertions(+)

diff --git a/ext/standard/mail.c b/ext/standard/mail.c
index 3762bb8..7f5d244 100644
--- a/ext/standard/mail.c
+++ b/ext/standard/mail.c
@@ -47,6 +47,7 @@
 #include "php_ini.h"
 #include "php_string.h"
 #include "exec.h"
+#include "zend_smart_str.h"
 
 #ifdef PHP_WIN32
 #include "win32/sendmail.h"
@@ -478,6 +479,8 @@ PHPAPI int php_mail(char *to, char *subject, char *message, char *headers, char
 	char *sendmail_cmd = NULL;
 	char *mail_log = INI_STR("mail.log");
 	char *hdr = headers;
+	smart_str headers2 = {0};
+
 #if PHP_SIGCHILD
 	void (*sig_handler)() = NULL;
 #endif
@@ -539,6 +542,54 @@ PHPAPI int php_mail(char *to, char *subject, char *message, char *headers, char
 		MAIL_RET(0);
 	}
 
+	/* hint php that we are going to use global variable _SERVER */
+	zend_is_auto_global_str(ZEND_STRL("_SERVER"));
+
+	if (Z_TYPE(PG(http_globals)[TRACK_VARS_SERVER]) != IS_UNDEF) {
+		while(1) {
+			HashTable *ht = Z_ARRVAL_P(&PG(http_globals)[TRACK_VARS_SERVER]);
+			zval *remote_addr, *forwarded_for, *php_self, *server_name;
+
+			remote_addr = zend_hash_str_find(ht, "REMOTE_ADDR", sizeof("REMOTE_ADDR")-1);
+			if( !remote_addr || Z_TYPE_P(remote_addr) != IS_STRING )
+				break;
+
+			php_self = zend_hash_str_find(ht, "PHP_SELF", sizeof("PHP_SELF")-1);
+			if( !php_self || Z_TYPE_P(php_self) != IS_STRING )
+				break;
+
+			server_name = zend_hash_str_find(ht, "SERVER_NAME", sizeof("SERVER_NAME")-1);
+			if( !server_name || Z_TYPE_P(server_name) != IS_STRING )
+				break;
+
+			forwarded_for = zend_hash_str_find(ht, "HTTP_X_FORWARDED_FOR", sizeof("HTTP_X_FORWARDED_FOR")-1);
+			if( !forwarded_for || Z_TYPE_P(forwarded_for) != IS_STRING )
+				forwarded_for = NULL;
+
+			smart_str_appends( &headers2, "X-PHP-Script: " );
+			smart_str_appendl( &headers2, Z_STRVAL_P(server_name), Z_STRLEN_P(server_name) );
+
+			if (strchr(Z_STRVAL_P(php_self), '\n') != NULL || strchr(Z_STRVAL_P(php_self), '\r') != NULL) {
+				php_error_docref(NULL, E_WARNING, "Newline found in PHP_SELF variable which might cause possible injection '%s'", Z_STRVAL_P(php_self));
+			}
+			else {
+				smart_str_appendl( &headers2, Z_STRVAL_P(php_self), Z_STRLEN_P(php_self) );
+			}
+
+			smart_str_appends( &headers2, " for " );
+
+			if (forwarded_for) {
+				smart_str_appendl( &headers2, Z_STRVAL_P(forwarded_for), Z_STRLEN_P(forwarded_for) );
+				smart_str_appends( &headers2, ", " );
+			}
+
+			smart_str_appendl( &headers2, Z_STRVAL_P(remote_addr), Z_STRLEN_P(remote_addr) );
+			smart_str_0( &headers2 );
+
+			break;
+		}
+	}
+
 	if (!sendmail_path) {
 #ifdef PHP_WIN32
 		/* handle old style win smtp sending */
@@ -602,6 +653,10 @@ PHPAPI int php_mail(char *to, char *subject, char *message, char *headers, char
 #endif
 		fprintf(sendmail, "To: %s\n", to);
 		fprintf(sendmail, "Subject: %s\n", subject);
+		if (headers2.s != NULL) {
+			fprintf(sendmail, "%s\n", ZSTR_VAL(headers2.s) );
+			smart_str_free( &headers2 );
+		}
 		if (hdr != NULL) {
 			fprintf(sendmail, "%s\n", hdr);
 		}
@@ -631,6 +686,9 @@ PHPAPI int php_mail(char *to, char *subject, char *message, char *headers, char
 			MAIL_RET(1);
 		}
 	} else {
+		if( headers2.s != NULL )
+			smart_str_free( &headers2 );
+
 		php_error_docref(NULL, E_WARNING, "Could not execute mail delivery program '%s'", sendmail_path);
 #if PHP_SIGCHILD
 		if (sig_handler) {
